     1                                  ;
     2                                  ;
     3                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
     4                                  ;
     5                                  ;
     6                                  ;	Name: Gauge Pendergrass
     7                                  ;	Date: 2/27/2016
     8                                  ;	File-name: task2 (not caps)
     9                                  ;	To compile: nasm -f elf 64 'file-name'.asm  THEN  gcc -m64 'file-name'.o -o 'exe-name'
    10                                  ;	To Save and Exit:  ':x'
    11                                  ;
    12                                  ;
    13                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    14                                  
    15                                  
    16                                  ;
    17                                  ;
    18                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    19                                  ;
    20                                  ;
    21                                  	;Command Calls / Numbers from System
    22                                  	;Needed for input / output
    23                                  	%define STDOUT	 	 1
    24                                  	%define SYS_EXIT 	 1
    25                                  	%define SYS_WRITE 	 4
    26                                  	%define SYS_READ	 3
    27                                  	%define STDIN	  	 0
    28                                  ;
    29                                  ;
    30                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    31                                  
    32                                  
    33                                  ;
    34                                  ;
    35                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    36                                  ;
    37                                  ;
    38                                  	;Section for initialized data
    39                                  	SECTION	.data
    40                                  
    41                                  	
    42                                  		;Value as requested by coalter	
    43 00000000 0200                    		value:		dw	2
    44                                  
    45                                  		;messaged used to output to the screen
    46 00000002 4772656574696E6773-     		message1:	db	"Greetings, Peasant, Please enter your name?: "
    47 0000000B 2C2050656173616E74-
    48 00000014 2C20506C6561736520-
    49 0000001D 656E74657220796F75-
    50 00000026 72206E616D653F3A20 
    51 0000002F 257300                  		f_str:		db	"%s", 0
    52 00000032 256400                  		fmt1:		db	"%d", 0	
    53                                  		;Determines the message length
    54                                  		message1_length equ	$ - message1
    55                                  
    56 00000035 506C6561736520656E-     		message2:	db	"Please enter a number between 0 and 123456789 inclusive?: "
    57 0000003E 7465722061206E756D-
    58 00000047 626572206265747765-
    59 00000050 656E203020616E6420-
    60 00000059 313233343536373839-
    61 00000062 20696E636C75736976-
    62 0000006B 653F3A20           
    63                                  		message2_length equ	$ - message2
    64                                  	
    65                                  
    66                                  
    67                                  
    68                                  
    69                                  
    70                                  
    71                                  
    72                                  
    73                                  
    74                                  
    75                                  
    76                                  ;
    77                                  ;
    78                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    79                                  
    80                                  
    81                                  
    82                                  ;
    83                                  ;
    84                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    85                                  ;
    86                                  ;
    87                                  	;Section for uninitialized data
    88                                  	SECTION	.bss
    89                                  		
    90                                  		;Define a variable name, reserve the length of byte to 60
    91 00000000 <res 0000003C>          		name 		resb	60 
    92                                  		;reserve doublework worth of bytes
    93 0000003C <res 00000004>          		namelength	resd	1
    94                                  
    95 00000040 <res 00000009>          		number		resb	9
    96                                  	
    97 00000049 <res 00000004>          		numberlength	resd	1
    98                                  
    99                                  
   100                                  
   101                                  
   102                                  
   103                                  
   104                                  ;
   105                                  ;
   106                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   107                                  
   108                                  
   109                                  ;
   110                                  ;
   111                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   112                                  ;
   113                                  ;
   114                                  	;Section for the actual program
   115                                  	SECTION	.text
   116                                  		extern printf
   117                                  		extern scanf
   118                                  
   119                                  
   120                                  		global	main
   121                                  			;This is used for calling c functions which we will be doing from here on out.
   122                                  
   123                                  		main:
   124                                  			;push	EBP
   125                                  			;mov	EBP, ESP
   126                                  
   127                                  			;push	message1
   128                                  			;push	f_str
   129                                  			;call	printf
   130                                  			;add	ESP, 16		 
   131                                  		
   132                                  			;push	name
   133                                  			;push	f_str
   134                                  			;call	scanf
   135                                  			;mov	RBX, RAX
   136                                  			;add	RSP, 16
   137                                  
   138                                  
   139                                  			;mov	ESP, EBP
   140                                  			;pop	EBP
   141                                  			;mov	EAX, 0
   142                                  			
   143                                  
   144                                  
   145                                  	;Write the string to stdout (the screen)
   146 00000000 B804000000              			mov	EAX, SYS_WRITE
   147 00000005 BB01000000              			mov	EBX, STDOUT
   148 0000000A B9[02000000]            			mov	ECX, message1
   149 0000000F BA33000000              			mov	EDX, message1_length
   150 00000014 CD80                    			int	80h
   151                                  
   152                                  			;Takes in User-Input
   153 00000016 B803000000              			mov	EAX, SYS_READ
   154 0000001B BB00000000              			mov	EBX, STDIN
   155 00000020 B9[00000000]            			mov	ECX, name
   156 00000025 BA[3C000000]            			mov	EDX, namelength
   157 0000002A CD80                    			int	80h
   158 0000002C 48                      			dec	EAX
   159 0000002D A3[3C000000]            			mov	[namelength],	EAX
   160                                  
   161                                  
   162                                  			;Asks the user for a number
   163 00000032 B804000000              			mov	EAX, SYS_WRITE
   164 00000037 BB01000000              			mov	EBX, STDOUT
   165 0000003C B9[35000000]            			mov	ECX, message2
   166 00000041 BA3A000000              			mov	EDX, message2_length
   167 00000046 CD80                    			int	80h
   168                                  
   169                                  			;Takes in user input
   170 00000048 B803000000              			mov	EAX, SYS_READ
   171 0000004D BB00000000              			mov	EBX, STDIN
   172 00000052 B9[40000000]            			mov	ECX, number
   173 00000057 BA[49000000]            			mov	EDX, numberlength
   174 0000005C CD80                    			int 	80h
   175 0000005E 48                      			dec	EAX
   176 0000005F A3[49000000]            			mov	[numberlength],	 EAX
   177                                  
   178                                  
   179                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   180                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   181                                  
   182                                  			;ret
   183                                  			;Exit the prgram gracefully
   184 00000064 B801000000              			mov	EAX, SYS_EXIT
   185 00000069 BB00000000              			mov	EBX, 0
   186 0000006E CD80                    			int	80h
   187                                  
   188                                  
   189                                  
   190                                  
   191                                  
   192                                  
   193                                  
   194                                  
   195                                  
   196                                  
   197                                  
   198                                  ;
   199                                  ;
   200                                  ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&	
